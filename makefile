CC = g++
CFLAGS = -std=c++11 -Os -I src -I benchmarks/src
TOUCHSTONE = src
BENCHMARKS = benchmarks/src

top:
	@echo -e "Target unspecified:\n\
	\tlarge_benchmark: Compiles and runs a large JSON parsing benchmark.\n\
	\tclean:           Removes all files generated by the makefile."

mkbin:
	@echo -e "Creating bin directory..." 
	if mkdir bin;
	then echo -e "\e[32mSuccess.\e[0m";\
	else echo -e "\e[91mFailure.\e[0m";\
	fi

mkbenchmarker:
	@echo -e "Compiling JSON benchmarker..."
	@if command -v  $(CC) &> /dev/null;\
	then if $(CC) $(CFLAGS) $(BENCHMARKS)/benchmark.cc $(BENCHMARKS)/file_map.cc $(TOUCHSTONE)/*.cc -o bin/benchmarker.out &> /dev/null;\
		then echo -e "\e[32mSuccess.\e[0m";\
		else echo -e "\e[91mFailure.\e[0m";\
		fi;\
	else echo -e "\e[1m\e[91m$(CC) required.\e[0m";\
	fi

mkgenerator:
	@echo -e "Compiling JSON generator..."
	@if command -v $(CC) &> /dev/null;\
	then if $(CC) $(CFLAGS) $(BENCHMARKS)/generate.cc $(BENCHMARKS)/random_json.cc -o bin/generator.out &> /dev/null;\
		then echo -e "\e[32mSuccess.\e[0m";\
		else echo -e "\e[91mFailure.\e[0m";\
		fi;\
	else echo -e "\e[1m\e[91m$(CC) required.\e[0m";\
	fi

large_benchmark:
	@if [ -e bin ] || make mkbin;\
	then if [ -e bin/benchmarker.out ] || make mkbenchmarker;\
		then if [ -e bin/generator.out ] || make mkgenerator;\
			then if ./bin/generator.out 1000000;\
				then ./bin/benchmarker.out random.json;\
				else echo -e "\e[91mFailed to generate JSON.\e[0m";\
				fi;\
			fi;\
		fi;\
	fi


clean:
	@echo -e "Removing binaries..."
	@if rm bin/* &> /dev/null;\
	then echo -e "\e[32mSuccess.\e[0m";\
	else echo -e "\e[35mNo binaries to remove.\e[0m";\
	fi
	@echo -e "Removing JSON files..."
	@if [ -e random.json ] && rm random.json;\
	then echo -e "\e[32mSuccess.\e[0m";\
	else echo -e "\e[35mNo JSON files to remove.\e[0m";\
	fi
